{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA4DA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAItD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACpB,OACCR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GAoBnBC,MArDf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACtC,OACCZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEnCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAE9Dd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACdL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACCgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCwECC,6MAlFdC,MAAQ,KAMRC,cAAgB,WAUf,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,EAAOb,GAC5C,OAAOd,EAAAC,EAAAC,cAAC0B,EAAD,CACNxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBA2CnBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSb,EAAKc,WADd,OACNb,EADMU,EAAAI,KAEZf,EAAKgB,SAAS,CACbf,WAHW,wBAAAU,EAAAM,SAAAT,QAObM,SAAW,WAEV,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAiBA,EAAKC,KAAtB,SACTC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,0FAjE1BC,QAAQC,IAAI,+CAiBZD,QAAQC,IAAI,cADL,IAECzB,EAAW0B,KAAK7B,MAAhBG,OACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBACjCA,EAAS0B,KAAK5B,gBAAkB,uDAMnC0B,QAAQC,IAAI,aACZC,KAAKpB,oBAnCWqB,aC1BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.f1586e59.chunk.js","sourcesContent":["import React from 'react'; // old : import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n/*class Movie extends Component {\r\n\r\n  static propTypes = {\r\n    title: PropTypes.number.isRequired,\r\n    poster: PropTypes.string.isRequired\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <MoviePoster poster={this.props.poster} />\r\n        <h1>{this.props.title}</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass MoviePoster extends Component{\r\n\r\n  static propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <img src={this.props.poster} alt=\"Movie Poster\" />\r\n    )\r\n  }\r\n}*/\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n\treturn (\r\n\t\t<div className=\"Movie\">\r\n\t\t\t<div className=\"Movie__Column\">\r\n\t\t\t\t<MoviePoster poster={poster} alt={title} />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"Movie__Column\">\r\n\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t<div className=\"Movie__Genres\">\r\n\t\t\t\t\t{genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"Movie__Synopsis\">\r\n\t\t\t\t\t<LinesEllipsis\r\n\t\t\t\t\t\ttext={synopsis}\r\n\t\t\t\t\t\tmaxLine='3'\r\n\t\t\t\t\t\tellipsis='...'\r\n\t\t\t\t\t\ttrimRight\r\n\t\t\t\t\t\tbasedOn='letters'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n  return (\r\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n  )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n\treturn (\r\n\t\t<span className=\"Movie__Genre\">{genre}</span>\r\n\t)\r\n}\r\n\r\nMovie.propTypes = {\r\n\ttitle: PropTypes.string.isRequired, // isRequired : 해당 요소가 필수임을 나타냄\r\n\tposter: PropTypes.string.isRequired,\r\n\tgenres: PropTypes.array.isRequired,\r\n\tsynopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n\tposter: PropTypes.string.isRequired,\r\n\talt: PropTypes.string.isRequired\r\n\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n\tgenre: PropTypes.string.isRequired\r\n}\r\nexport default Movie;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nconst movieTitles = [\r\n\t\"Matrix\",\r\n\t\"Full Metal Jacket\",\r\n\t\"Oldboy\",\r\n\t\"Star Wars\"\r\n]\r\n\r\nconst movieImages = [\r\n\t\"http://cfile230.uf.daum.net/image/120165194C241D693330B4\",\r\n\t\"https://i.ebayimg.com/images/g/9U4AAMXQfvlSj-e-/s-l300.jpg\",\r\n\t\"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/Oldboy-poster-alternate-by-Rope-of-Silicon.jpg\",\r\n\t\"https://images-na.ssl-images-amazon.com/images/I/51poKKV63GL.jpg\"\r\n]\r\n\r\n/* state 안으로 이동\r\nconst movies = [\r\n\t{\r\n\t\ttitle: \"Matrix\",\r\n\t\tposter: \"http://cfile230.uf.daum.net/image/120165194C241D693330B4\"\r\n\t},\r\n\t{\r\n\t\ttitle: \"Full Metal Jacket\",\r\n\t\tposter: \"https://i.ebayimg.com/images/g/9U4AAMXQfvlSj-e-/s-l300.jpg\"\r\n\t},\r\n\t{\r\n\t\ttitle: \"Oldboy\",\r\n\t\tposter: \"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/Oldboy-poster-alternate-by-Rope-of-Silicon.jpg\"\r\n\t},\r\n\t{\r\n\t\ttitle: \"Star Wars\",\r\n\t\tposter: \"https://images-na.ssl-images-amazon.com/images/I/51poKKV63GL.jpg\"\r\n\t}\r\n]*/\r\n\r\nclass App extends Component {\r\n\r\n\t// 해당 싸이클은 컴포넌트가 존재하기 시작할 때 자동으로 발생 (1)componentWillMount() -> (2)render() -> (3)componentDidMount\r\n\r\n\tstate = {}\r\n\r\n\tcomponentWillMount(){\r\n\t\tconsole.log('will mount')\r\n\t}\r\n\r\n\t_renderMovies = () => {\r\n\t\tconst movies = this.state.movies.map((movie, index) => {\r\n\t\t\treturn <Movie\r\n\t\t\t\ttitle={movie.title_english}\r\n\t\t\t\tposter={movie.medium_cover_image}\r\n\t\t\t\tkey={movie.id}\r\n\t\t\t\tgenres={movie.genres}\r\n\t\t\t\tsynopsis={movie.synopsis}\r\n\t\t\t/>\r\n\t\t})\r\n\t\treturn movies\r\n\t}\r\n\r\n\trender(){\r\n\t\tconsole.log('did render')\r\n\t\tconst { movies } = this.state;\r\n\t  return(\r\n\t    <div className={movies ? \"App\" : \"App--loading\"}>\r\n\t\t\t\t{movies ? this._renderMovies() : 'Loading'}\r\n\t    </div>\r\n\t  );\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tconsole.log('did mount');\r\n\t\tthis._getMovies();\r\n\t\t/*setTimeout(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tmovies: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttitle: \"Matrix\",\r\n\t\t\t\t\t\tposter: \"http://cfile230.uf.daum.net/image/120165194C241D693330B4\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttitle: \"Full Metal Jacket\",\r\n\t\t\t\t\t\tposter: \"https://i.ebayimg.com/images/g/9U4AAMXQfvlSj-e-/s-l300.jpg\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttitle: \"Oldboy\",\r\n\t\t\t\t\t\tposter: \"https://d13ezvd6yrslxm.cloudfront.net/wp/wp-content/images/Oldboy-poster-alternate-by-Rope-of-Silicon.jpg\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttitle: \"Star Wars\",\r\n\t\t\t\t\t\tposter: \"https://images-na.ssl-images-amazon.com/images/I/51poKKV63GL.jpg\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t}, 5000)*/\r\n\t}\r\n\r\n\t_getMovies = async () => {\r\n\t\tconst movies = await this._callApi()\r\n\t\tthis.setState({\r\n\t\t\tmovies // old javascript => 'movies : movies'\r\n\t\t})\r\n\t}\r\n\r\n\t_callApi = () => {\r\n\t\t// promise는 성공적으로 수행할 수 있고, 그렇지 않을 경우 결과물을 catch, then으로 받아볼 수 있음\r\n\t\treturn fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count') // fetch는 심플하게 url을 ajax로 불러올 수 있음 (ver.Old : xml http request)\r\n\t\t.then(response => response.json())\r\n\t\t.then(json => /* return */ json.data.movies) // arrow function (=>)은 return이 자동이므로 작성 불필요.\r\n\t\t.catch(err => console.log(err))\r\n\t}\r\n\r\n}\r\n\r\n/*******\r\n\t1) fetch를 callApi로 변경\r\n\t2) getMovies function 사용 (getMovies는 asynchronous function)\r\n\t3) getMovies안에 movies라는 이름의 const variable 생성\r\n\t4) callApi 작업이 완료되고 return 하기를 await함\r\n\t5) callApi는 fetch promise를 return할 것인데 이는 모든 데이터의 json임.\r\n\t\t그래서 'json.data.movies'라는 value는 const movies의 결과값이 됨\r\n****** */\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}